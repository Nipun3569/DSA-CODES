#include<iostream>
#include<stdlib.h>

using namespace std;



struct Node{
	int data;
	
	struct Node* next;
};

void linkedListTraversal(struct Node *ptr){
	while(ptr!=NULL){
	
	cout<<ptr->data<<endl;
	ptr=ptr->next;
}}
//case1
struct Node * insertAtFirst(struct Node *head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
 
    ptr->next = head;
    return ptr; 
}
//case2
struct Node * insertAtIndex(struct Node *head, int data, int index){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    struct Node * p = head;
    int i = 0;
 
    while (i!=index-1)
    {
        p = p->next;
        i++;
    }
    ptr->data = data;
    ptr->next = p->next;
    p->next=ptr;
}
//case 3

struct Node * insertAtEnd(struct Node *head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node* p=head;
 while(p->next!=NULL){
 	p=p->next;
 }
 
    p->next=ptr;
 
    ptr->next = NULL;
    return head; 
}
//case 4
struct Node * insertAfterNode(struct Node *prevNode,struct Node *head, int data){
    struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
    ptr->data = data;
    
    ptr->next=prevNode->next;
    prevNode->next=ptr;
    return head; 
}

int main(){
    struct Node *head;
    struct Node *second;
    struct Node *third;
    struct Node *fourth;
    int ch;
    
    cout<<"enter 1. to insert at beg"<<endl;
    cout<<"enter 2. to insert at index"<<endl;
    cout<<"enter 3. to insert at end"<<endl;
    cout<<"enter 4. to insert after node"<<endl;
    cin>>ch;

    // Allocate memory for nodes in the linked list in Heap
    head = (struct Node *)malloc(sizeof(struct Node));
    second = (struct Node *)malloc(sizeof(struct Node));
    third = (struct Node *)malloc(sizeof(struct Node));
    fourth = (struct Node *)malloc(sizeof(struct Node));

    // Link first and second nodes
    head->data = 7;
    head->next = second;

    // Link second and third nodes
    second->data = 11;
    second->next = third;

    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;

    // Terminate the list at the third node
    fourth->data = 66;
    fourth->next = NULL;
    
    printf("Linked list before insertion\n");
    linkedListTraversal(head);
    switch(ch){
	case 1:
    head = insertAtFirst(head, 56);
    break;
    
    case 2:
    	int a;
    	int ind;
    	cout<<"enter number and index"<<endl;
    	cin>>a>>ind;
    head = insertAtIndex(head, a, ind);
    break;
    
    case 3:
    head=insertAtEnd(head,22);
    break;

    case 4:
    head=insertAfterNode(second,head,45);
    break;}
    printf("\nLinked list after insertion\n");
    linkedListTraversal(head);

    
    return 0;
}
